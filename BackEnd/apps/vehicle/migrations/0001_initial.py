# Generated by Django 4.2.9 on 2025-03-11 10:47

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('companies', '0003_alter_companie_type'),
        ('employeers', '0003_alter_employeer_user'),
    ]

    operations = [
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('plate_number', models.CharField(help_text='License plate number of the vehicle', max_length=20, unique=True)),
                ('nickname', models.CharField(blank=True, help_text='Nickname or common name for the vehicle', max_length=100, null=True)),
                ('vehicle_type', models.CharField(choices=[('Truck', 'Truck'), ('Van', 'Van'), ('Car', 'Car'), ('SUV', 'SUV'), ('Pickup', 'Pickup')], help_text='Type of vehicle', max_length=20)),
                ('maker', models.CharField(choices=[('Ford', 'Ford'), ('Chevrolet', 'Chevrolet'), ('Dodge', 'Dodge'), ('Toyota', 'Toyota'), ('Honda', 'Honda'), ('Nissan', 'Nissan'), ('Jeep', 'Jeep'), ('Mitsubishi', 'Mitsubishi'), ('Kia', 'Kia'), ('BMW', 'BMW'), ('Mercedes-Benz', 'Mercedes-Benz'), ('Audi', 'Audi'), ('Volkswagen', 'Volkswagen'), ('Lexus', 'Lexus'), ('Infiniti', 'Infiniti'), ('Subaru', 'Subaru'), ('GMC', 'GMC'), ('Mazda', 'Mazda'), ('Pontiac', 'Pontiac'), ('Buick', 'Buick'), ('Cadillac', 'Cadillac'), ('Saturn', 'Saturn'), ('GMC', 'GMC'), ('Chrysler', 'Chrysler'), ('Porsche', 'Porsche'), ('Jeep', 'Jeep'), ('Maserati', 'Maserati'), ('Lotus', 'Lotus'), ('Suzuki', 'Suzuki'), ('Scion', 'Scion'), ('Hummer', 'Hummer'), ('Saturn', 'Saturn'), ('GMC', 'GMC'), ('Chrysler', 'Chrysler'), ('Porsche', 'Porsche'), ('Jeep', 'Jeep'), ('Maserati', 'Maserati'), ('Lotus', 'Lotus'), ('Suzuki', 'Suzuki'), ('Scion', 'Scion'), ('Hummer', 'Hummer')], help_text='Manufacturer of the vehicle', max_length=50)),
                ('color', models.CharField(choices=[('Black', 'Black'), ('White', 'White'), ('Red', 'Red'), ('Blue', 'Blue'), ('Green', 'Green'), ('Yellow', 'Yellow'), ('Orange', 'Orange'), ('Purple', 'Purple'), ('Pink', 'Pink'), ('Brown', 'Brown'), ('Gray', 'Gray'), ('Other', 'Other')], help_text='Color of the vehicle', max_length=20)),
                ('vin', models.CharField(help_text='Vehicle Identification Number', max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message='VIN must be 17 characters and not include I, O, or Q', regex='^[A-HJ-NPR-Z0-9]{17}$')], verbose_name='VIN')),
                ('capacity_weight', models.DecimalField(decimal_places=2, help_text='Maximum weight capacity in pounds', max_digits=10)),
                ('capacity_volume', models.DecimalField(decimal_places=2, help_text='Maximum volume capacity in cubic feet', max_digits=10)),
                ('insurance_number', models.CharField(blank=True, help_text='Insurance policy number', max_length=100, null=True)),
                ('insurance_expiry', models.DateField(blank=True, help_text='Insurance policy expiry date', null=True)),
                ('registration_expiry', models.DateField(blank=True, help_text='Vehicle registration expiry date', null=True)),
                ('last_maintenance_date', models.DateField(blank=True, help_text='Date of last maintenance', null=True)),
                ('next_maintenance_date', models.DateField(blank=True, help_text='Scheduled date for next maintenance', null=True)),
                ('odometer', models.PositiveIntegerField(default=0, help_text='Current odometer reading in miles')),
                ('fuel_level', models.DecimalField(decimal_places=2, default=0.0, help_text='Current fuel level (percentage)', max_digits=5)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the vehicle is currently active and available for use')),
                ('assigned_driver', models.ForeignKey(blank=True, help_text='Driver currently assigned to this vehicle', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vehicles', to='employeers.employeer')),
                ('companie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_companie', to='companies.companie')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to='employeers.employeer')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to='employeers.employeer')),
            ],
            options={
                'verbose_name': 'Vehicle',
                'verbose_name_plural': 'Vehicles',
                'ordering': ['plate_number'],
                'permissions': [('assign_driver', 'Can assign drivers to vehicles'), ('record_maintenance', 'Can record maintenance for vehicles'), ('update_status', 'Can update vehicle status')],
            },
        ),
        migrations.CreateModel(
            name='VehicleMaintenanceRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('maintenance_type', models.CharField(help_text='Type of maintenance performed', max_length=100)),
                ('description', models.TextField(help_text='Detailed description of the maintenance performed')),
                ('cost', models.DecimalField(decimal_places=2, help_text='Cost of the maintenance', max_digits=10)),
                ('service_date', models.DateField(help_text='Date when the maintenance was performed')),
                ('odometer_reading', models.PositiveIntegerField(help_text='Odometer reading at the time of maintenance')),
                ('performed_by', models.CharField(help_text='Person or company that performed the maintenance', max_length=255)),
                ('invoice_number', models.CharField(blank=True, help_text='Invoice or reference number for the maintenance', max_length=100, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the maintenance', null=True)),
                ('next_maintenance_date', models.DateField(blank=True, help_text='Recommended date for next maintenance', null=True)),
                ('next_maintenance_odometer', models.PositiveIntegerField(blank=True, help_text='Recommended odometer reading for next maintenance', null=True)),
                ('companie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_companie', to='companies.companie')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to='employeers.employeer')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to='employeers.employeer')),
                ('vehicle', models.ForeignKey(help_text='Vehicle that received maintenance', on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_records', to='vehicle.vehicle')),
            ],
            options={
                'verbose_name': 'Maintenance Record',
                'verbose_name_plural': 'Maintenance Records',
                'ordering': ['-service_date'],
            },
        ),
        migrations.CreateModel(
            name='VehicleFuelRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('date', models.DateField(help_text='Date of the fuel purchase')),
                ('odometer_reading', models.PositiveIntegerField(help_text='Odometer reading at the time of fueling')),
                ('fuel_amount', models.DecimalField(decimal_places=2, help_text='Amount of fuel added in gallons', max_digits=8)),
                ('fuel_cost', models.DecimalField(decimal_places=2, help_text='Total cost of the fuel purchase', max_digits=10)),
                ('fuel_type', models.CharField(default='Regular', help_text='Type of fuel purchased', max_length=50)),
                ('station_name', models.CharField(blank=True, help_text='Name of the fuel station', max_length=100, null=True)),
                ('location', models.CharField(blank=True, help_text='Location where fuel was purchased', max_length=255, null=True)),
                ('full_tank', models.BooleanField(default=True, help_text='Whether the tank was filled completely')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the fuel purchase', null=True)),
                ('companie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_companie', to='companies.companie')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to='employeers.employeer')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to='employeers.employeer')),
                ('vehicle', models.ForeignKey(help_text='Vehicle that received fuel', on_delete=django.db.models.deletion.CASCADE, related_name='fuel_records', to='vehicle.vehicle')),
            ],
            options={
                'verbose_name': 'Fuel Record',
                'verbose_name_plural': 'Fuel Records',
                'ordering': ['-date'],
            },
        ),
    ]
