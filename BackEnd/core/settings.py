"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv
import sys

# Loads the environment variables from the .env file
load_dotenv()

################################
########## CORE CONFIG #########
################################
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-default-key-change-this')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', False) if os.getenv('DJANGO_DEBUG') == '0' else True

ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', '127.0.0.1').split(',')

################################
########## APPLICATIONS #########
################################
INSTALLED_APPS = [
    "daphne",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    
    # Security
    'axes',  # Proteção contra força bruta
    
    # WebSockets
    'channels',
    
    # REST Framework
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_gis',
    'django_filters',
    'corsheaders',
    'drf_spectacular',
    'drf_spectacular_sidecar',
    
    # Custom Settings
    'custom_settings',
    'custom_settings.custom_middlewares',
    
    # Base Models
    'basemodels',
    
    # API
    'api',
    
    # Apps
    'apps',
    'apps.accounts',
    'apps.accounts.profiles',
    'apps.notifications',
    
    #Companie Manegement Apps
    'apps.companies',
    'apps.companies.customers',
    'apps.companies.employeers',
    'apps.companies.attendance',
    
    #Delivery Manegement App
    # 'apps.deliveries',
    # 'apps.deliveries.tracking',
    'apps.vehicle',
    
    
    #Inventory Manegement Apps
    'apps.inventory',
    'apps.inventory.product',
    'apps.inventory.supplier',
    'apps.inventory.categories',
    'apps.inventory.warehouse',
    'apps.inventory.inflows',
    'apps.inventory.movements',
    'apps.inventory.outflows',
    'apps.inventory.transfer',
    'apps.inventory.brand',
    'apps.inventory.load_order',
    'apps.inventory.purchase_order',
    
]

################################
######### MIDDLEWARE ##########
################################
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'axes.middleware.AxesMiddleware',  # Deve vir após AuthenticationMiddleware
    'crum.CurrentRequestUserMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    # Custom Middleware
    'custom_settings.custom_middlewares.middleware.JSONResponse404Middleware',
    'custom_settings.custom_middlewares.middleware.AnonymousUserMiddleware',
]

# Add SecurityMiddleware in production only
if not DEBUG:
    MIDDLEWARE.insert(0, 'django.middleware.security.SecurityMiddleware')

################################
########## SECURITY ############
################################
AUTH_USER_MODEL = 'accounts.User'

# Django Axes Configuration (Proteção contra força bruta)
AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesBackend',
    'django.contrib.auth.backends.ModelBackend',
]
AXES_ENABLED = True
AXES_FAILURE_LIMIT = 10
AXES_LOCK_OUT_AT_FAILURE = True
AXES_COOLOFF_TIME = 0.30  # 30 seconds
AXES_LOCKOUT_TEMPLATE = None  # Returns JSON response instead of template
AXES_LOCKOUT_URL = None
AXES_LOCKOUT_PARAMETERS = ["ip_address", ["username", "user_agent"]] # Adds 'ip_address' and 'user_agent' to the list of parameters checked
AXES_IPWARE_META_PRECEDENCE_ORDER = [  # Modern configuration for user agent and other metadata
    'HTTP_X_FORWARDED_FOR',
    'REMOTE_ADDR',
]

# SSL/HTTPS settings
if DEBUG:  # In development
    SECURE_SSL_REDIRECT = False
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOW_CREDENTIALS = True
    CSRF_TRUSTED_ORIGINS = [
        "http://localhost:8000",
        "http://127.0.0.1:8000",
    ]
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:8000",
        "http://127.0.0.1:8000",
    ]
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False
else:  # In production
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    X_FRAME_OPTIONS = 'DENY'
    
    # CORS for production
    CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS', '').split(',')
    CORS_ALLOW_ALL_ORIGINS = False
    CORS_URLS_REGEX = r'^/api/.*$'
    
    # Other security settings
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = True
    CSRF_TRUSTED_ORIGINS = os.getenv('CSRF_TRUSTED_ORIGINS', '').split(',')

# Common security settings
CSRF_USE_SESSIONS = True
SESSION_COOKIE_AGE = 3600  # 1 hour in seconds
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
CSRF_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SAMESITE = 'Lax'
SECURE_REFERRER_POLICY = 'same-origin'
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'

################################
########## TEMPLATES ###########
################################
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'staticfiles': 'django.templatetags.static',
                'rest_framework': 'rest_framework.templatetags.rest_framework',
            }
        },
    },
]

################################
########### EMAIL ##############
################################
if DEBUG:
    # Choose one of the backends below to test:

    # 1. Console Backend (default) - Shows emails in the console
    # EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    
    # 2. File Backend - Saves emails in files
    # EMAIL_FILE_PATH = os.path.join(BASE_DIR, 'tmp', 'emails')
    # EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
    
    # 3. Local SMTP - Requires aiosmtpd running (python -m aiosmtpd -n -l localhost:8025)
    # EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    # EMAIL_HOST = 'localhost'
    # EMAIL_PORT = 8025
    
    # 4. Mailtrap - Requires mailtrap.io running (https://mailtrap.io/)
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
    EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
    EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
else:
    # Production configurations
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
    EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
    EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')

DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@drywall.com')

# Ensure email directory exists if using file backend
if 'filebased' in EMAIL_BACKEND:
    email_dir = os.path.join(BASE_DIR, 'tmp', 'emails')
    if not os.path.exists(email_dir):
        os.makedirs(email_dir)

################################
########## DATABASE ###########
################################
DB_NAME = os.getenv("DATABASE_NAME")
DB_USER = os.getenv("DATABASE_USER")
DB_PASS = os.getenv("DATABASE_PASSWORD")
DB_HOST = os.getenv("DATABASE_HOST")
DB_PORT = os.getenv("DATABASE_PORT")

if 'test' in sys.argv:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': ':memory:',  # Using in-memory database for faster tests
        }
    }
elif DB_NAME and DB_USER:
    DATABASES = {
        "default": {
            "ENGINE": "django.contrib.gis.db.backends.postgis",
            "NAME": DB_NAME,
            "USER": DB_USER,
            "PASSWORD": DB_PASS,
            "HOST": DB_HOST,
            "PORT": DB_PORT,
        },
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.contrib.gis.db.backends.spatialite",
            "NAME": "db.sqlite3",
        }
    }

################################
####### AUTHENTICATION ########
################################
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

################################
########## LOGGING ############
################################
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{asctime}] {levelname} {module} {process:d} {thread:d} {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'simple': {
            'format': '[{asctime}] {levelname} {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'ignore_repeated_errors': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: not (
                record.levelname == 'WARNING' and 
                'swagger' in record.getMessage().lower() or
                'rest_framework.fields' in record.name or
                'Unauthorized access attempt' in record.getMessage() or
                'No organization found for user' in record.getMessage()
            ),
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'filters': ['ignore_repeated_errors'],
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'logs/django.log',
            'formatter': 'verbose',
            'filters': ['ignore_repeated_errors'],
        },
        'info_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'logs/info.log',
            'formatter': 'verbose',
            'filters': ['ignore_repeated_errors'],
        },
        'warning_file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': 'logs/warning.log',
            'formatter': 'verbose',
            'filters': ['ignore_repeated_errors'],
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'logs/error.log',
            'formatter': 'verbose',
            'filters': ['ignore_repeated_errors'],
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'channels': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'channels_redis': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['error_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
        'apps': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.accounts': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.companies.employeers': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.companies.customers': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.companies.hr': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.inventory': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.inventory.product': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.inventory.supplier': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.inventory.categories': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.inventory.warehouse': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.inventory.brand': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.inventory.inflows': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.inventory.outflows': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.inventory.transfer': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.inventory.load_order': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.notifications': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'axes': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',
            'propagate': True,
        },
    },
}

# Ensure logs directory exists
if not os.path.exists('logs'):
    os.makedirs('logs')

################################
######### REST CONFIG ##########
################################

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'UNAUTHENTICATED_USER': 'django.contrib.auth.models.AnonymousUser',
    'UNAUTHENTICATED_TOKEN': 'rest_framework_simplejwt.authentication.JWTAuthentication',
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',
        'user': '1000/day'
    },
    'NON_FIELD_ERRORS_KEY': 'detail',
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ) if not DEBUG else (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'COERCE_DECIMAL_TO_STRING': False,
    'DEFAULT_VERSIONING_CLASS': None,
    'DEFAULT_VERSION': None,
    'ALLOWED_VERSIONS': None,
    'VERSION_PARAM': 'version',
    
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    'DATE_FORMAT': '%Y-%m-%d',
    'DATETIME_INPUT_FORMATS': ['%Y-%m-%d', '%Y-%m-%dT%H:%M:%S'],
    'DATE_INPUT_FORMATS': ['%Y-%m-%d']
}

################################
#### INTERNATIONALIZATION ######
################################
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'America/New_York'
USE_I18N = True
USE_TZ = False

DATETIME_FORMAT = '%Y-%m-%d %H:%M:%S'
DATETIME_INPUT_FORMATS = ['%Y-%m-%d', '%Y-%m-%dT%H:%M:%S']

DATE_FORMAT = '%Y-%m-%d'
DATE_INPUT_FORMATS = ['%Y-%m-%d']

################################
######### STATIC FILES #########
################################
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Configuração do WhiteNoise
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Ensure static and media directories exist
if not os.path.exists(STATIC_ROOT):
    os.makedirs(STATIC_ROOT)
if not os.path.exists(MEDIA_ROOT):
    os.makedirs(MEDIA_ROOT)

################################
########## MEDIA FILES #########
################################

################################
########## URL CONFIG ##########
################################
ROOT_URLCONF = 'core.urls'
WSGI_APPLICATION = 'core.wsgi.application'

################################
########## CACHE CONFIG ########
################################
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.getenv('REDIS_URL', 'redis://127.0.0.1:6379/4'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'SOCKET_CONNECT_TIMEOUT': 5,
            'SOCKET_TIMEOUT': 5,
            'RETRY_ON_TIMEOUT': True,
            'MAX_CONNECTIONS': 1000,
            'CONNECTION_POOL_KWARGS': {'max_connections': 100},
        },
        'KEY_PREFIX': 'drywallwarehouse',
        'TIMEOUT': 300,  # 5 minutes default
    },
    'sessions': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.getenv('REDIS_URL', 'redis://127.0.0.1:6379/5'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        'TIMEOUT': 3600,  # 1 hour for sessions
    }
}

# Use Redis for session storage
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'sessions'

# Cache timeouts for different types of data (in seconds)
CACHE_TIMEOUTS = {
    'product': 3600,        # 1 hour
    'warehouse': 1800,      # 30 minutes
    'movements': 300,       # 5 minutes
    'inventory': 300,       # 5 minutes
    'customer': 3600,       # 1 hour
    'supplier': 3600,       # 1 hour
    'user': 3600,          # 1 hour
    'company': 3600,       # 1 hour
}

# Use the default cache for axes
AXES_CACHE = 'default'

################################
########## CHANNELS CONFIG #####
################################

ASGI_APPLICATION = 'core.asgi.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [os.getenv('REDIS_URL', 'redis://127.0.0.1:6379/3')],
        },
    },
}

################################
########## CELERY CONFIG #######
################################
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://127.0.0.1:6379/1')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', 'redis://127.0.0.1:6379/2')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes
CELERY_WORKER_HIJACK_ROOT_LOGGER = False

# Windows-specific settings
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_WORKER_POOL = 'solo'  # Use solo pool for Windows
CELERY_WORKER_CONCURRENCY = 1  # Limit concurrency on Windows

################################
########## RATE LIMITING #######
################################
RATELIMIT_ENABLE = True
RATELIMIT_USE_CACHE = 'default'

################################
########## BACKUP CONFIG #########
################################
DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {'location': 'backups/'}

################################
########## PROMETHEUS METRICS #########
################################
PROMETHEUS_EXPORT_MIGRATIONS = False

################################
########## TIME INPUT FORMAT #########
################################
TIME_INPUT_FORMATS = [
    '%H:%M:%S',     # '14:30:59'
    '%H:%M',        # '14:30'
]

################################
########## DATE FORMAT #########
################################
DATE_FORMAT = "Y/M/d" # '2023/10/01'

################################
########## GDAL CONFIG #########
################################

# Configuration of spatial libraries for the delivery tracking system
# Used by:
# - DeliveryLocationUpdate (real-time GPS tracking)
# - DeliveryRoute (planned routes and waypoints)
# - DeliveryPickup (pickup sequence)

if os.name == 'nt':  # For Windows
    # Base directory of OSGeo4W and binaries
    OSGEO4W_ROOT = r"C:\OSGeo4W"
    OSGEO4W_BIN = os.path.join(OSGEO4W_ROOT, "bin")
    
    # Data directories for GDAL and PROJ
    GDAL_DATA = os.path.join(OSGEO4W_ROOT, "apps", "gdal")
    PROJ_LIB = os.path.join(OSGEO4W_ROOT, "share", "proj")
    
    # Spatial libraries for operations
    GDAL_LIBRARY_PATH = os.path.join(OSGEO4W_BIN, "gdal310.dll")
    GEOS_LIBRARY_PATH = os.path.join(OSGEO4W_BIN, "geos_c.dll")
    
    # Validation of critical components
    spatial_components = {
        'GDAL Library': GDAL_LIBRARY_PATH,
        'GEOS Library': GEOS_LIBRARY_PATH,
        'GDAL Data': GDAL_DATA,
        'PROJ Data': PROJ_LIB
    }
    
    # Check for missing components
    missing = [name for name, path in spatial_components.items() 
              if not os.path.exists(path)]
    
    if missing:
        import warnings
        warnings.warn(
            "\nSpatial components not found:\n" + 
            "\n".join(f"- {component}" for component in missing) +
            "\n\nDelivery tracking system requires these components for:" +
            "\n- Real-time GPS tracking" +
            "\n- Route calculation and visualization" +
            "\n- Geolocation of pickups and deliveries" +
            "\n\nVerify OSGeo4W installation."
        )
else:
    # Configuration for Linux/Unix environments
    GDAL_LIBRARY_PATH = "/usr/lib/libgdal.so"
    GEOS_LIBRARY_PATH = "/usr/lib/libgeos_c.so"
    GDAL_DATA = "/usr/share/gdal"
    PROJ_LIB = "/usr/share/proj"

################################
###### DEFAULT AUTO FIELD ######
################################
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

################################
#### SPECTACULAR SETTINGS ######
################################
SPECTACULAR_SETTINGS = {
    'TITLE': 'DryWall WareHouse API',
    'DESCRIPTION': 'API Documentation for DryWall WareHouse System',
    'VERSION': '0.0.1',
    'SERVE_INCLUDE_SCHEMA': True,
    'SCHEMA_PATH_PREFIX': '/api/v1/',
    
    # UI Settings
    'SWAGGER_UI_SETTINGS': {
        'docExpansion': 'none',
        'defaultModelExpandDepth': 2,
        'defaultModelsExpandDepth': -1,
        'deepLinking': True,
        'displayRequestDuration': True,
        'filter': False,
        'persistAuthorization': True,
    },
    
    # Authentication
    'SECURITY': [
        {
            'Bearer': {
                'type': 'apiKey',
                'name': 'Authorization',
                'in': 'header',
                'description': 'Enter your Bearer token in the format: Bearer <token>'
            }
        }
    ],
    
    'SERVE_PERMISSIONS': ['rest_framework.permissions.AllowAny'],
    
    # Tag Sorting and Naming
    'TAGS': [
        # Authentication
        {'name': 'JWT - Auth', 'description': 'JWT authentication endpoints'},
        
        # Vehicles
        {'name': 'Delivery - Vehicles', 'description': 'Vehicle management endpoints'},
        
        # Delivery
        {'name': 'Delivery', 'description': 'Delivery management endpoints'},
        
        # Inventory Management
        {'name': 'Inventory - Transfers', 'description': 'Transfer management endpoints'},
        {'name': 'Inventory - Inflows', 'description': 'Inflow management endpoints'},
        {'name': 'Inventory - Outflows', 'description': 'Outflow management endpoints'},
        {'name': 'Inventory - Warehouse', 'description': 'Warehouse management endpoints'},
        {'name': 'Inventory - Load Orders', 'description': 'Load order management endpoints'},
        {'name': 'Inventory - Purchase Orders', 'description': 'Purchase order management endpoints'},
        {'name': 'Inventory - Products', 'description': 'Product management endpoints'},
        {'name': 'Inventory - Suppliers', 'description': 'Supplier management endpoints'},
        {'name': 'Inventory - Movements', 'description': 'Movement management endpoints'},
        
        # Customers
        {'name': 'Companies - Customers', 'description': 'Customer management endpoints'},
        
        # Accounts Management
        {'name': 'Accounts - Authentication', 'description': 'Authentication endpoints'},
        {'name': 'Accounts - Management', 'description': 'User management endpoints'},
        {'name': 'Accounts - Profiles', 'description': 'User profile management endpoints'},
        {'name': 'Accounts - Password Reset', 'description': 'Password reset endpoint'},
        
        # Companies
        {'name': 'Companies - Employees', 'description': 'Employee management endpoints'},
        {'name': 'Companies - Attendance', 'description': 'Attendance management endpoints'},
    ]
}

################################
########## JWT CONFIG ##########
################################
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}


SERPAPI_API_KEY = os.getenv('SERPAPI_API_KEY', '')
SERPAPI_BASE_URL = os.getenv('SERPAPI_BASE_URL', '')
GOOGLE_MAPS_API_KEY = os.getenv('GOOGLE_MAPS_API_KEY', '')
