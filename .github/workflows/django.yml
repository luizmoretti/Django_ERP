name: Django ERP CI/CD

on:
  push:
    branches: [ "main", "Dev" ]
  pull_request:
    branches: [ "main", "Dev" ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: erp_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:latest
        env:
          REDIS_URL: redis://localhost:6379/0
          CELERY_BROKER_URL: redis://localhost:6379/1
          CELERY_RESULT_BACKEND: redis://localhost:6379/2
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.12]

    defaults:
      run:
        working-directory: ./BackEnd

    env:
      REDIS_URL: redis://localhost:6379/0
      CELERY_BROKER_URL: redis://localhost:6379/1
      CELERY_RESULT_BACKEND: redis://localhost:6379/2
      DJANGO_SECRET_KEY: "github-actions-test-key"
      DJANGO_DEBUG: "1"
      DJANGO_ALLOWED_HOSTS: "localhost,127.0.0.1"
      DATABASE_NAME: "erp_test"
      DATABASE_USER: "postgres"
      DATABASE_PASSWORD: "postgres"
      DATABASE_HOST: "localhost"
      DATABASE_PORT: "5432"

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort coverage

    - name: Create pyproject.toml for isort configuration
      run: |
        echo "[tool.isort]" > pyproject.toml
        echo "profile = \"black\"" >> pyproject.toml
        echo "skip_glob = [\"*/migrations/*\", \"*/settings.py\"]" >> pyproject.toml
        echo "lines_after_imports = 2" >> pyproject.toml
        echo "known_django = \"django\"" >> pyproject.toml
        echo "known_rest_framework = \"rest_framework\"" >> pyproject.toml
        echo "sections = \"FUTURE,STDLIB,DJANGO,REST_FRAMEWORK,THIRDPARTY,FIRSTPARTY,LOCALFOLDER\"" >> pyproject.toml
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Lint with black
      run: |
        black .
    
    - name: Check code formatting with Black
      run: |
        black --check .

    - name: Lint with isort
      run: |
        isort .
    
    - name: Check imports formatting with isort
      continue-on-error: true
      run: |
        isort --check-only --diff .

    - name: Run Migrations
      run: |
        python manage.py migrate
    
    - name: Run Coverage Report
      run: |
        coverage run --source='.' manage.py test
        coverage report
