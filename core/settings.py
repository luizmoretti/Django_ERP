"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv

# Carrega as variáveis de ambiente do arquivo .env
load_dotenv()

################################
########## CORE CONFIG #########
################################
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-default-key-change-this')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'True') == 'False'

ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', '127.0.0.1').split(',')

################################
########## APPLICATIONS #########
################################
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # REST Framework
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'drf_spectacular',
    'drf_spectacular_sidecar',
    
    # Custom Settings
    'custom_settings',
    'custom_settings.custom_middlewares',
    
    # API
    'api',
    
    # Apps
    'apps',
    'apps.accounts',
    
    #Companie Manegement Apps
    'apps.companies',
    'apps.companies.customers',
    'apps.companies.employeers',
    'apps.companies.hr',
    
    #Delivery Manegement App
    'apps.deliveries',
    'apps.deliveries.vehicles',
    
    
    #Inventory Manegement Apps
    'apps.inventory',
    'apps.inventory.product',
    'apps.inventory.supplier',
    'apps.inventory.categories',
    'apps.inventory.warehouse',
    'apps.inventory.inflows',
    'apps.inventory.outflows',
    'apps.inventory.transfer',
    'apps.inventory.brand',
    'apps.inventory.delivery_os',
    
]

################################
######### MIDDLEWARE ##########
################################
MIDDLEWARE = [ 
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    # Custom Middleware
    'custom_settings.custom_middlewares.middleware.JSONResponse404Middleware',
]

# Adicione SecurityMiddleware apenas em produção
if not DEBUG:
    MIDDLEWARE.insert(0, 'django.middleware.security.SecurityMiddleware')

################################
########## SECURITY ############
################################
AUTH_USER_MODEL = 'accounts.NormalUser'

# Configurações de SSL/HTTPS
if DEBUG: # Em desenvolvimento
    pass
    # SECURE_SSL_REDIRECT = False
    # SESSION_COOKIE_SECURE = False
    # CSRF_COOKIE_SECURE = False
    # SECURE_BROWSER_XSS_FILTER = False
    # SECURE_CONTENT_TYPE_NOSNIFF = False
    # SECURE_HSTS_SECONDS = 0
    # SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    # SECURE_HSTS_PRELOAD = False
    # SECURE_PROXY_SSL_HEADER = None
    # X_FRAME_OPTIONS = 'SAMEORIGIN'
    
    # # CORS para desenvolvimento
    # CORS_ALLOWED_ORIGINS = [
    #     "http://localhost:8000",
    #     "http://127.0.0.1:8000",
    # ]
    # CORS_ALLOW_ALL_ORIGINS = True
    # CORS_URLS_REGEX = r'^/api/.*$'
    
    # # Outras configurações de segurança para desenvolvimento
    # SESSION_COOKIE_HTTPONLY = True
    # CSRF_COOKIE_HTTPONLY = True
    # CSRF_TRUSTED_ORIGINS = ['http://localhost:8000', 'http://127.0.0.1:8000']
    
    # # Desativa qualquer configuração que possa forçar HTTPS
    # USE_X_FORWARDED_HOST = False
    # USE_X_FORWARDED_PORT = False
    # SECURE_PROXY_SSL_HEADER = None
else:  # Em produção
    # SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    X_FRAME_OPTIONS = 'DENY'
    
    # CORS para produção
    CORS_ALLOWED_ORIGINS = [
        "https://seu-dominio.com",
    ]
    CORS_ALLOW_ALL_ORIGINS = False
    CORS_URLS_REGEX = r'^/api/.*$'
    
    # Outras configurações de segurança
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = True
    CSRF_TRUSTED_ORIGINS = ['https://seu-dominio.com']

# Configurações comuns de segurança
CSRF_USE_SESSIONS = True
CSRF_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SAMESITE = 'Lax'

################################
########## TEMPLATES ###########
################################
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'staticfiles': 'django.templatetags.static',
                'rest_framework': 'rest_framework.templatetags.rest_framework',
            }
        },
    },
]

################################
########## DATABASE ###########
################################
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

################################
####### AUTHENTICATION ########
################################
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

################################
########## LOGGING ############
################################
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{asctime}] {levelname} {module} {process:d} {thread:d} {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'simple': {
            'format': '[{asctime}] {levelname} {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'ignore_repeated_errors': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: not (
                record.levelname == 'WARNING' and 
                'swagger' in record.getMessage().lower() or
                'rest_framework.fields' in record.name or
                'Unauthorized access attempt' in record.getMessage() or
                'No organization found for user' in record.getMessage()
            ),
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'filters': ['ignore_repeated_errors'],
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'logs/django.log',
            'formatter': 'verbose',
            'filters': ['ignore_repeated_errors'],
        },
        'info_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'logs/info.log',
            'formatter': 'verbose',
            'filters': ['ignore_repeated_errors'],
        },
        'warning_file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': 'logs/warning.log',
            'formatter': 'verbose',
            'filters': ['ignore_repeated_errors'],
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'logs/error.log',
            'formatter': 'verbose',
            'filters': ['ignore_repeated_errors'],
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['error_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
        'apps': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.accounts': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.companies.employeers': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.companies.customers': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.companies.hr': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.inventory': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.inventory.product': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.inventory.supplier': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.inventory.categories': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.inventory.warehouse': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.inventory.brand': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.inventory.inflows': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.inventory.outflows': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
        'apps.inventory.transfer': {
            'handlers': ['console', 'info_file', 'warning_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
            'filters': ['ignore_repeated_errors'],
        },
    },
}

# Ensure logs directory exists
if not os.path.exists('logs'):
    os.makedirs('logs')

################################
######### REST CONFIG ##########
################################

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'EXCEPTION_HANDLER': 'apps.core.exceptions.custom_exception_handler',
    'NON_FIELD_ERRORS_KEY': 'detail',
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ) if not DEBUG else (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ),
    'COERCE_DECIMAL_TO_STRING': False,
    'DEFAULT_VERSIONING_CLASS': None,
    'DEFAULT_VERSION': None,
    'ALLOWED_VERSIONS': None,
    'VERSION_PARAM': 'version',
    
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    'DATE_FORMAT': '%Y-%m-%d',
    'DATETIME_INPUT_FORMATS': ['%Y-%m-%d', '%Y-%m-%dT%H:%M:%S'],
    'DATE_INPUT_FORMATS': ['%Y-%m-%d']
}

################################
#### INTERNATIONALIZATION ######
################################
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'America/New_York'
USE_I18N = True
USE_TZ = False

DATETIME_FORMAT = '%Y-%m-%d %H:%M:%S'
DATETIME_INPUT_FORMATS = ['%Y-%m-%d', '%Y-%m-%dT%H:%M:%S']

DATE_FORMAT = '%Y-%m-%d'
DATE_INPUT_FORMATS = ['%Y-%m-%d']

################################
######### STATIC FILES #########
################################
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Ensure static directories exist
if not os.path.exists(STATIC_ROOT):
    os.makedirs(STATIC_ROOT)

if not os.path.exists(os.path.join(BASE_DIR, 'static')):
    os.makedirs(os.path.join(BASE_DIR, 'static'))

################################
########## URL CONFIG ##########
################################
ROOT_URLCONF = 'core.urls'
WSGI_APPLICATION = 'core.wsgi.application'

################################
########## MEDIA FILES #########
################################
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

################################
########## CACHE CONFIG #########
################################
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

################################
########## CELERY CONFIG #######
################################
CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'
CELERY_RESULT_BACKEND = 'django-db'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'America/New_York'

################################
########## RATE LIMITING #######
################################
RATELIMIT_ENABLE = True
RATELIMIT_USE_CACHE = 'default'

################################
########## BACKUP CONFIG #########
################################
DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {'location': 'backups/'}

################################
########## PROMETHEUS METRICS #########
################################
PROMETHEUS_EXPORT_MIGRATIONS = False

################################
########## TIME INPUT FORMAT #########
################################
TIME_INPUT_FORMATS = [
    '%H:%M:%S',     # '14:30:59'
    '%H:%M',        # '14:30'
]

################################
########## DATE FORMAT #########
################################
DATE_FORMAT = "Y/M/d" # '2023/10/01'

################################
########## DEFAULT AUTO FIELD #########
################################
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

################################
########## SPECTACULAR SETTINGS ##########
################################
SPECTACULAR_SETTINGS = {
    'TITLE': 'DryWall WareHouse API',
    'DESCRIPTION': 'API Documentation for DryWall WareHouse System',
    'VERSION': '0.0.1',
    'SERVE_INCLUDE_SCHEMA': True,
    'SCHEMA_PATH_PREFIX': '/api/v1/',
    
    # UI Settings
    'SWAGGER_UI_SETTINGS': {
        'docExpansion': 'none',
        'defaultModelExpandDepth': 2,
        'defaultModelsExpandDepth': -1,
        'deepLinking': True,
        'displayRequestDuration': True,
        'filter': True,
        'persistAuthorization': True,
    },
    
    # Authentication
    'SECURITY': [
        {
            'Bearer': {
                'type': 'apiKey',
                'name': 'Authorization',
                'in': 'header',
                'description': 'Enter your Bearer token in the format: Bearer <token>'
            }
        }
    ],
    
    # Tag Sorting and Naming
    'TAGS': [
        # Authentication
        {'name': 'JWT - Auth', 'description': 'JWT authentication endpoints'},
        
        # Inventory Management
        
        
        # Reports
        
        
        # Billing
        
        
        # Customers
        {'name': 'Companies - Customers', 'description': 'Customer management endpoints'},
        
        
        # Users Management
        {'name': 'Users - Authentication', 'description': 'User authentication endpoints'},
        {'name': 'Users - Management', 'description': 'User management endpoints'},
        
        
        # Organizations
        
        
        # Teams
        
        
        # Companies
        {'name': 'Companies - Employees', 'description': 'Employee management endpoints'},
        {'name': 'Companies - Employees Soft Delete', 'description': 'Employee soft delete endpoints'},
        {'name': 'HR - Human Resources', 'description': 'HR management endpoints'},
    ]
}

################################
########## JWT CONFIG ##########
################################
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}
