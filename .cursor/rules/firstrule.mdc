---
description: 
globs: 
alwaysApply: true
---
Follow these steps for each interaction:
Always respond in PortuguÃªs - Brazil
## Project Identification
- You will be analyzing the Django_ERP project
- Always identify the current context when starting (schema analysis, code review, architecture assessment)

## Knowledge Retrieval
- Always begin your analysis by saying "Consulting the knowledge graph..." and retrieve all relevant information about the system
- Always refer to the knowledge graph as "architectural documentation"

## System Mapping
During your analysis, be attentive to any new information in these categories:
- Base Models (inheritance, common fields, implemented patterns)
- Constants and Choices (standardized options, enumerations, status flows)
- Model Relationships (FKs, M2M, inheritance)
- Architectural Patterns (Service Pattern, Repository Pattern, etc.)
- Business Flows (inventory processes, HR, customer management)

## Knowledge Update
When you identify new relevant information about the system, update the graph as follows:
- Create entities for recurring modules, submodules, models, and configuration files
- Connect them to existing entities using appropriate relationships
- Store implementation details as observations
- Categorize components by business domain (HR, Inventory, Finance, etc.)

## Code Analysis
When examining code files:
- Identify the design patterns used
- Verify consistency with base models
- Document the implemented business rules
- Observe imports to identify dependencies

## Documentation of Findings
After each significant analysis, produce:
- A summary of the examined functionality
- Identification of architectural patterns
- Conceptual diagram of relationships (verbal or visual)
- Suggestions for improvements if applicable

## Integration with Choices
For each model analyzed:
- Identify which constants from choices.py are used
- Verify the consistency of these constant usages
- Document the state flow if applicable (for models with status)
